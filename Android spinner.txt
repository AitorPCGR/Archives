Después de un par de semanas de inactividad, debido a que ha habido que finalizar 2 proyectos y apenas ha quedado tiempo libre, volvemos a la publicar una nueva entrada.

En esta ocasión vamos a intentar explicar el uso y comportamiento de un Spinner.

Un Spinner es un elemento que ofrece un desplegable en el que poder seleccionar una de múltiples opciones, en el que además se visualiza la opción seleccionada de entre las disponibles:

Spinner desplegado
Spinner desplegado
Para explicar su funcionamiento, cómo rellenarlo de datos y las opciones más utilizadas vamos a utilizar un ejemplo en el que rellenaremos el Spinner con animales, y al seleccionar uno mostraremos una pequeña descripción del animal.

Creando el Spinner
En primer lugar necesitaremos crear un Layout que contenga un Spinner y un EditText multilinea en el que se mostrará la descripción de la opción elegida en el Spinner. Esta podría ser una opcion:

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:paddingBottom="@dimen/activity_vertical_margin"
    android:paddingLeft="@dimen/activity_horizontal_margin"
    android:paddingRight="@dimen/activity_horizontal_margin"
    android:paddingTop="@dimen/activity_vertical_margin"
    tools:context=".SpinnerMain" >
 
    <Spinner
        android:id="@+id/spAnimals"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentTop="true"
        android:layout_centerHorizontal="true"
        android:entries="@array/animals" />
 
    <EditText
        android:id="@+id/etDescription"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_alignParentLeft="true"
        android:layout_alignParentRight="true"
        android:layout_below="@+id/spAnimals"
        android:ems="10"
        android:focusable="false"
        android:inputType="textMultiLine" />
 
</RelativeLayout>
Introduciendo datos en el Spinner desde XML
Una vez que hemos creado el layout, necesitaremos rellenar el layout con los animales que queramos, para eso tenemos dos opciones distintas:

Crear un recurso string-array en XML en el que indiquemos todos los nombres de los animales:
1
2
3
4
5
6
7
8
9
10
11
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="animals">
        <item>Perro</item>
        <item>Gato</item>
        <item>Caballo</item>
        <item>Canario</item>
        <item>Vaca</item>
        <item>Cerdo</item>
    </string-array>
</resources>
Crear la colección de nombres en código Java, ejemplo:
1
2
private final static String[] names = { "Perro", "Gato", "Caballo",
            "Canario", "Vaca", "Cerdo" };
La ventaja que ofrece la primera forma es que al tener el recurso previamente configurado, se puede asignar directamente en el XML del layout al propio Spinner, sin necesidad de código extra en Java. Para ello utilizaríamos el atributo android:entries=”” y le daremos como valor el nombre que asignamos al string-array que contiene los nombres de los animales. En el caso de nuestro ejemplo sería android:entries=”@array/animals”. Sin embargo para utilizar la colección desde el código Java tendremos que crear un Adapter (una clase que sirve de puente entre el Spinner y la colección de datos que contiene, y que se encarga de crear las vistas necesarias para mostrar los datos). Este tipo de objeto lo explicaremos más adelante, cuando mostremos cómo mostrar vistas personalizadas para estos datos (por ejemplo al lado del nombre del animal se podría poner una imagen).

Cada opción tiene una utilidad distinta: Si son opciones fijas utilizaremos un recurso XML que nos ahorrará trabajo. Si son opciones dinámicas (datos introducidos en una Base de Datos por ejemplo), la tendremos que gestionar obligatoriamente a través del código Java. Por esto voy a tratar de explicar las dos formas de utilizar el Spinner.

Introduciendo datos en el Spinner desde Java
La primera forma de rellenar el Spinner (a partir del XML) ya la hemos explicado, falta explicar cómo hacerlo desde el código Java. Para rellenar el Spinner en primer lugar crearemos el adapter que hemos mencionado, utilizaremos el ArrayAdapter para esto. Esta clase tiene varios constructores, que se podrán ver en Android Developer. En este ejemplo utilizaremos el constructor que utiliza un Context (el propio de la Activity), un recurso para mostar datos (la vista, utilizamos una por defecto de Android) y el array de String que hemos creado:

1
2
ArrayAdapter adapter = new ArrayAdapter<String>(this,
    android.R.layout.simple_spinner_dropdown_item, names);
Ahora tenemos que asignar el adapter que hemos creado al Spinner que tenemos, para eso declararemos una variable de Spinner, que inicializaremos apuntando al Spinner que hemos creado en el layout, posteriormente le asignaremos el adapter al Spinner:

1
2
spAnimals = (Spinner)findViewById(R.id.spAnimals);
spAnimals.setAdapter(adapter);
Con esto ya hemos creado nuestro Spinner, y hemos rellenado los datos para que se muestren al desplegarlo, en la siguiente entrada crearemos las descripciones de los diferentes animales y haremos que el EditText las muestre en función de la opción elegida en el Spinner.

En la siguiente entrada mostraremos una descripción en función de la opción del Spinner elegida.

Descargas
Puedes ver el resultado del ejemplo en tu móvil descargando nuestra aplicación desde Google Play.